# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ieF6GACKWv-zyqsU0lZir3Vk-xENIl0C
"""

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        dic = {}    # 频率计数
        res = []    # 最终结果
        for num in nums:
            if num in dic:
                dic[num] += 1
            else:
                dic[num] = 1     
        heap = []     # 堆
        for key, freq in dic.items():
            heapq.heappush(heap, (freq, key))
            if len(heap) > k:
                heapq.heappop(heap)     # 这一步的技巧是在遍历dic的同时处理heap
        for freq, key in heap:
            res.append(key)
        return res[::-1]